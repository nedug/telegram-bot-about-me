const TelegramApi = require('node-telegram-bot-api');
const {gameOptions, againOptions, contactMeOptions, portfolioOptions} = require('./options');
const axios = require('axios');
const UserModel = require('./models');
const mongoose = require('mongoose');
require('dotenv').config();


const token = process.env.TG_TOKEN;
const JOKE_API = 'https://v2.jokeapi.dev/joke/Programming?type=single';


const bot = new TelegramApi(token, {polling: true});

const chats = {};


const startGame = async (chatId) => {
    await bot.sendMessage(chatId, `–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–µ —É–≥–∞–¥–∞—Ç—å!`);
    const randomNumber = Math.floor(Math.random() * 10)
    chats[chatId] = randomNumber;
    await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥—ã–≤–∞–π', gameOptions);
};


const start = async () => {

    try {
        await new mongoose.connect(process.env.DB_URL); /* –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ MongoDB */
    } catch (e) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å', e);
    }

    bot.setMyCommands([
        {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
        {command: '/portfolio', description: '–ú–æ—ë CV –∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ'},
        {command: '/skills', description: '–ú–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'},
        {command: '/contacts', description: '–ú–æ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'},
        {command: '/game', description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É'},
        {command: '/joke', description: '–°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏'},
    ]);

    bot.on('message', async msg => {

        // console.log(msg)

        const text = msg.text;
        const chatId = msg.chat.id;

        try {
            if (text === '/start') {
                const user = await UserModel.findOne({chatId});

                if (!user) {
                    await UserModel.create({chatId});
                }

                await bot.sendSticker(chatId, 'https://chpic.su/_data/stickers/e/EatPrayCode/EatPrayCode_001.webp');
                await bot.sendMessage(chatId, `<b>${msg.from.first_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!`, {parse_mode: 'HTML'});
                await bot.sendMessage(chatId, `–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</b>!
–ò —è –Ω–∞—á–∏–Ω–∞—é—â–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!  üñ•`, {parse_mode: 'HTML'});
                return bot.sendMessage(chatId, `T—É—Ç –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.`, {parse_mode: 'HTML'});
            }
            if (text === '/portfolio') {
                return bot.sendMessage(chatId, '–ú–æ—ë CV –∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:', portfolioOptions);
            }
            if (text === '/skills') {
                return bot.sendMessage(chatId, `<b>HTML, CSS + S–°SS
JavaScript + TypeScript
React + REDUX + REDUX Toolkit 
NODE.js + Express + MongoDB 
GIT + GitHub + Heroku
Axios + REST API + Postman
UNIT TEST (TDD, Jest) + StoryBook
Module CSS + Styled-components + Tailwind + Material UI
</b>`, {disable_web_page_preview: true, parse_mode: 'HTML'});
            }
            if (text === '/contacts') {
                return bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π —á–µ—Ä–µ–∑:', contactMeOptions);
            }
            if (text === '/game') {
                return startGame(chatId);
            }
            if (text === '/joke') {
                try {
                    const response = await axios(JOKE_API);
                    return bot.sendMessage(chatId, response.data.joke);
                } catch (e) {
                    console.log(e)
                    return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞!)');
                }
            }
            return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)');
        } catch (e) {
            return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞!)');
        }
    })

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if (data === '/again') {
            return startGame(chatId)
        }
        if (data === '/email') {
            return bot.sendMessage(chatId, `ru55nedug@gmail.com`, {disable_web_page_preview: true,});
        }
        if (data === '/telegram') {
            return bot.sendMessage(chatId, `https://t.me/polkaj`, {disable_web_page_preview: true,});
        }
        if (data === '/linkedin') {
            return bot.sendMessage(chatId, `https://www.linkedin.com/in/alexander-rusin-789760226`, {disable_web_page_preview: true,});
        }
        if (data === '/github') {
            return bot.sendMessage(chatId, `https://github.com/nedug`, {disable_web_page_preview: true,});
        }
        if (data === '/cv') {
            return bot.sendMessage(chatId, `https://drive.google.com/file/d/1mD977Y3Er8u_9zgPc350KDWF6A1grWAA/view`,);
        }
        if (data === '/portfoliocv') {
            return bot.sendMessage(chatId, `https://nedug.github.io/cv-alexander-r`,);
        }

        const user = await UserModel.findOne({chatId});

        if (data === chats[chatId]) {
            user.right += 1;
            await user.save();
            await bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`);
            return bot.sendMessage(chatId, `–í –∏–≥—Ä–µ —É —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ${user.right}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.wrong}, 
–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–π–≥—Ä—ã—à–∞ ${(user.right / (user.right + user.wrong) * 100).toFixed(1)}`, againOptions);
        } else {
            user.wrong += 1;
            await user.save();
            await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª, –±–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`);
            return bot.sendMessage(chatId, `–í –∏–≥—Ä–µ —É —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ${user.right}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.wrong}, 
–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–π–≥—Ä—ã—à–∞ ${(user.right / (user.right + user.wrong) * 100).toFixed(1)}`, againOptions);
        }
    })
};


start();