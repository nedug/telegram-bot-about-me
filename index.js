const TelegramApi = require('node-telegram-bot-api');
const {gameOptions, againOptions, contactMeOptions} = require('./options');
// const sequelize = require('./db');
// const UserModel = require('./models');
require('dotenv').config();


const token = process.env.TG_TOKEN;

const bot = new TelegramApi(token, {polling: true});

const chats = {};


const startGame = async (chatId) => {
    await bot.sendMessage(chatId, `–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–µ —É–≥–∞–¥–∞—Ç—å!`);
    const randomNumber = Math.floor(Math.random() * 10)
    chats[chatId] = randomNumber;
    await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥—ã–≤–∞–π', gameOptions);
};


const start = async () => {

    // try {
    //     await sequelize.authenticate()
    //     await sequelize.sync()
    // } catch (e) {
    //     console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å', e)
    // }

    bot.setMyCommands([
        {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
        {command: '/contactme', description: '–ú–æ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'},
        {command: '/aboutyou', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ'},
        {command: '/game', description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É'},

    ]);

    bot.on('message', async msg => {

        // console.log(msg)

        const text = msg.text;
        const chatId = msg.chat.id;

        try {
            if (text === '/start') {
                // await UserModel.create({chatId})
                await bot.sendSticker(chatId, 'https://chpic.su/_data/stickers/e/EatPrayCode/EatPrayCode_001.webp');
                await bot.sendMessage(chatId, `<b>${msg.from.first_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!`, {parse_mode: 'HTML'});
                await bot.sendMessage(chatId, `–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</b> –∏ —è –Ω–∞—á–∏–Ω–∞—é—â–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫! üñ•`, {parse_mode: 'HTML'});
                return bot.sendMessage(chatId, `T—É—Ç –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.`, {parse_mode: 'HTML'});
            }

            if (text === '/contactme') {
                // await UserModel.create({chatId})
                return bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π —á–µ—Ä–µ–∑:', contactMeOptions);
            }

            if (text === '/aboutyou') {
                // const user = await UserModel.findOne({chatId})
                return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name} ${msg.from.username}!`);
                // return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name} ${msg.from.last_name}, –≤ –∏–≥—Ä–µ —É —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ${user.right}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.wrong}`);
            }

            if (text === '/game') {
                return startGame(chatId);
            }

            return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)');

        } catch (e) {
            return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞!)');
        }

    })

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if (data === '/again') {
            return startGame(chatId)
        }
        if (data === '/email') {
            return bot.sendMessage(chatId, `ru55nedug@gmail.com`, {disable_web_page_preview: true, parse_mode: 'HTML'});
        }
        if (data === '/telegram') {
            return bot.sendMessage(chatId, `https://t.me/polkaj`, {disable_web_page_preview: true, parse_mode: 'HTML'});
        }
        if (data === '/linkedin') {
            return bot.sendMessage(chatId, `https://www.linkedin.com/in/alexander-rusin-789760226`, {disable_web_page_preview: true, parse_mode: 'HTML'});
        }
        if (data === '/github') {
            return bot.sendMessage(chatId, `https://github.com/nedug`, {disable_web_page_preview: true, parse_mode: 'HTML'});
        }

        // const user = await UserModel.findOne({chatId})
        if (data == chats[chatId]) {
            // user.right += 1;
            await bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions);
        } else {
            // user.wrong += 1;
            await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª, –±–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions);
        }
        // await user.save();
    })
};


start();